import { Request, Response } from "express";
import { AuthRequest } from "../middleware/authMiddleware";
import OrderModel from "../models/order.model";
import OrderItemModel, { OrderItem } from "../models/orderItem.model";
import TabelModel from "../models/table.model";
import AccountModel from "../models/account.model";

export const createOrder = async (req: AuthRequest, res: Response) => {
  try {
    const { tableID, items } = req.body;
    const createdBy = req.user?.id; // ‚úÖ L·∫•y userID t·ª´ token

    if (!createdBy) {
      return res.status(401).json({ message: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi t·∫°o" });
    }

    if (!items || !Array.isArray(items) || items.length === 0) {
      return res
        .status(400)
        .json({ message: "Danh s√°ch m√≥n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    // ‚úÖ 1. T·∫°o order m·ªõi
    const orderID = await OrderModel.create({ tableID, createdBy });

    // ‚úÖ 2. Th√™m danh s√°ch m√≥n
    const orderItems = items.map((i: any) => ({
      orderID,
      itemID: i.itemID,
      quantity: i.quantity,
      note: i.note || null,
    }));

    await OrderItemModel.createMany(orderItems);

    // ‚úÖ 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n => "2" (ƒëang c√≥ kh√°ch)
    const updateSuccess = await TabelModel.updateStatus(tableID, "1");

    if (!updateSuccess) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n ID ${tableID}`);
    }

    // ‚úÖ 4. Tr·∫£ k·∫øt qu·∫£ v·ªÅ client
    res.status(201).json({
      message: "T·∫°o order th√†nh c√¥ng",
      orderID,
      createdBy,
      tableID,
      items: orderItems,
      tableStatus: updateSuccess ? "2" : "Gi·ªØ nguy√™n",
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o order:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
// ‚úÖ L·∫•y order theo ID
export const getOrderById = async (req: Request, res: Response) => {
  try {
    const id = Number(req.params.id);
    const order = await OrderModel.getById(id);

    if (!order)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y order" });

    const items = await OrderItemModel.getByOrderId(id);
    res.json({ ...order, items });
  } catch (error) {
    console.error("‚ùå L·ªói getOrderById:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚úÖ L·∫•y t·∫•t c·∫£ orders k√®m items
export const getAllOrders = async (_req: Request, res: Response) => {
  try {
    const orders = await OrderModel.getAll();

    const result = await Promise.all(
      orders.map(async (order) => {
        const items = await OrderItemModel.getByOrderId(order.id!);
        const table = await TabelModel.getById(order.tableID);
        const staff = await AccountModel.getnameStaff(order.createdBy);
        console.log("üöÄ ~ getAllOrders ~ staff:", staff);
        return { ...order, items, table, staff };
      })
    );

    res.json(result);
  } catch (error) {
    console.error("‚ùå L·ªói getAllOrders:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚úÖ S·ª≠a order + items
export const updateOrder = async (req: Request, res: Response) => {
  try {
    const id = Number(req.params.id);
    const { tableID, createdBy, items } = req.body;

    const exists = await OrderModel.getById(id);
    if (!exists)
      return res.status(404).json({ message: "Order kh√¥ng t·ªìn t·∫°i" });

    // 1. Update order
    await OrderModel.update(id, { tableID, createdBy });

    // 2. Xo√° h·∫øt items c≈©
    await OrderItemModel.deleteByOrderId(id);

    // 3. Th√™m items m·ªõi
    if (items && Array.isArray(items) && items.length > 0) {
      const newItems: OrderItem[] = items.map((i: any) => ({
        orderID: id,
        itemID: i.itemID,
        quantity: i.quantity,
        note: i.note || null,
      }));
      await OrderItemModel.createMany(newItems);
    }

    res.json({ message: "C·∫≠p nh·∫≠t order th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói updateOrder:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
export const getOrderByTableAndStatus = async (req: Request, res: Response) => {
  try {
    const tableID = Number(req.params.tableID);
    if (isNaN(tableID)) {
      return res.status(400).json({ message: "tableID kh√¥ng h·ª£p l·ªá" });
    }

    // ‚úÖ 1. L·∫•y order c√≥ status = 0 theo tableID
    const order = await OrderModel.getOrderByTableAndStatus(tableID);
    if (!order) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng c√≥ order n√†o ƒëang ho·∫°t ƒë·ªông cho b√†n n√†y" });
    }

    // ‚úÖ 2. L·∫•y danh s√°ch m√≥n theo orderID
    const items = await OrderItemModel.getByOrderId(order.id!);

    // ‚úÖ 3. Tr·∫£ k·∫øt qu·∫£
    res.json({
      order,
      items,
    });
  } catch (error) {
    console.error("‚ùå L·ªói getOrderByTableAndStatus:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
export const updatestatusOdrder = async (req: Request, res: Response) => {
  try {
    const orderID = Number(req.params.orderID);
    const status = req.params.status;
    await OrderModel.updateStatus(orderID, status);

    res.status(200).json({ message: "c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói :", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
