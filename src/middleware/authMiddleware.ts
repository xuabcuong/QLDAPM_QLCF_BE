// src/middleware/authMiddleware.ts
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

const SECRET_KEY = process.env.JWT_SECRET || "supersecretkey123";

export interface AuthRequest extends Request {
  user?: { id: number; roleID: number }; // âš¡ Cáº­p nháº­t láº¡i theo payload tháº­t
}

export const verifyToken = (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers.authorization;
  console.log("ğŸš€ ~ verifyToken ~ authHeader:", authHeader);

  if (!authHeader) {
    return res.status(401).json({ message: "KhÃ´ng cÃ³ token xÃ¡c thá»±c" });
  }

  const token = authHeader.split(" ")[1]; // "Bearer <token>"

  if (!token) {
    return res.status(401).json({ message: "Token khÃ´ng há»£p lá»‡" });
  }

  try {
    // Giáº£i mÃ£ token
    const decoded = jwt.verify(token, SECRET_KEY) as {
      id: number;
      roleID: number;
    };

    // LÆ°u thÃ´ng tin user vÃ o request
    req.user = decoded;
    console.log("ğŸš€ ~ verifyToken ~ decoded:", decoded);

    next(); // Cho phÃ©p Ä‘i tiáº¿p Ä‘áº¿n controller
  } catch (error: any) {
    if (error.name === "TokenExpiredError") {
      return res
        .status(401)
        .json({ message: "Token Ä‘Ã£ háº¿t háº¡n, vui lÃ²ng Ä‘Äƒng nháº­p láº¡i" });
    }
    return res.status(403).json({ message: "Token khÃ´ng há»£p lá»‡" });
  }
};
